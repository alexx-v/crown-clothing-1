{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyAb_MCmAQQZJAauN7G2-hAUSYwn4tRSD8I',\n  authDomain: 'crown-db-9467d.firebaseapp.com',\n  databaseURL: 'https://crown-db-9467d.firebaseio.com',\n  projectId: 'crown-db-9467d',\n  storageBucket: 'crown-db-9467d.appspot.com',\n  messagingSenderId: '169832412267',\n  appId: '1:169832412267:web:806bfa2256c8187ba6ed2e',\n  measurementId: 'G-KJV40E62XX'\n}; // Сохраняем пользователя в DB.\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // Если объект пользователя есть, тогда выполнится.\n  if (!userAuth) return; // firestore возвращает два вида объектов: QueryReference or QuerySnapshot. Они могут быть либо документом, либо коллекцией в зависимости от того какой именно запрашиваем. Ответ получим, даже, если данных в DB нет.\n  // Query - запрос на получение документа/коллекции из DB:\n  // firestore.doc('/users/:userId');\n  // firestore.collection('/users');\n  // QueryReference (firestore.doc('users/dsfasfsafas') - отправили запрос на получение данных - получим в ответ объект QueryReference. Этот объект не содержит данных, касающихся документа/коллекции, которую запрашиваем. Он содержит данные запроса (path и id, который передали) и метод для получения объекта Snapshot, который содержит данные, которые ищем.\n  // documentReference (запрос к документу) - к документу можно применить CRUD методы (create - .set(), retrieve - .get(), update - .update(), delete - .delete() ).\n  // .get() - получить данные из documentReference - применяем на объекте, который возвращает documentReference - возвращает documentSnapshot (объект с данными, касающимися нашего запроса). Этот метод можно применить и на коллекции (Проверить, что получим).\n  // collectionReference (запрос к коллекции) - к коллекции можно применить .add() метод, позволяющий добавить документ в коллекцию.\n  // Обратились к документу. Получили объект documentRef. Еще не знаем, есть ли такой документ в DB или нет.\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // Обратились к Snapshot. Узнали существует ли такой документ в DB или нет. В этом объекте есть свойство exists. Если его значение true, значит документ есть в DB, если false, значит такого документа в DB нет. Там же есть id из объекта user, который получаем, отслеживая аутентификацию (auth.onAuthStateChanged()). Теперь можно запросить данные из этого документа, используя метод .data().\n\n  const snapShot = await userRef.get();\n  console.log('snapShot:', snapShot); // Если данных в DB нет. Т.е. пользователь заходит через гугл или регистрируется впервые, тогда нужно добавить этого пользователя в DB.\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth; // объект, который получаем при попытке залогиниться.\n\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } // const snapshotData = await snapShot.data();\n  // console.log('snapshotData:', snapshotData);\n\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["E:/React-Projects/Andrei-Neagoie/crown-clothing-2/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","console","log","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACdC,EAAAA,MAAM,EAAE,yCADM;AAEdC,EAAAA,UAAU,EAAE,gCAFE;AAGdC,EAAAA,WAAW,EAAE,uCAHC;AAIdC,EAAAA,SAAS,EAAE,gBAJG;AAKdC,EAAAA,aAAa,EAAE,4BALD;AAMdC,EAAAA,iBAAiB,EAAE,cANL;AAOdC,EAAAA,KAAK,EAAE,2CAPO;AAQdC,EAAAA,aAAa,EAAE;AARD,CAAf,C,CAWA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC5E;AACA,MAAI,CAACD,QAAL,EAAe,OAF6D,CAG5E;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAlB4E,CAmB5E;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,QAAzB,EArB4E,CAuB5E;;AACA,MAAI,CAACA,QAAQ,CAACI,MAAd,EAAsB;AACrB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBZ,QAA/B,CADqB,CACoB;;AACzC,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACH,YAAMZ,OAAO,CAACa,GAAR,CAAY;AACjBJ,QAAAA,WADiB;AAEjBC,QAAAA,KAFiB;AAGjBC,QAAAA,SAHiB;AAIjB,WAAGZ;AAJc,OAAZ,CAAN;AAMA,KAPD,CAOE,OAAOe,KAAP,EAAc;AACfR,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCO,KAAK,CAACC,OAAzC;AACA;AACD,GAtC2E,CAwC5E;AACA;;;AAEA,SAAOf,OAAP;AACA,CA5CM;AA8CPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n\tapiKey: 'AIzaSyAb_MCmAQQZJAauN7G2-hAUSYwn4tRSD8I',\r\n\tauthDomain: 'crown-db-9467d.firebaseapp.com',\r\n\tdatabaseURL: 'https://crown-db-9467d.firebaseio.com',\r\n\tprojectId: 'crown-db-9467d',\r\n\tstorageBucket: 'crown-db-9467d.appspot.com',\r\n\tmessagingSenderId: '169832412267',\r\n\tappId: '1:169832412267:web:806bfa2256c8187ba6ed2e',\r\n\tmeasurementId: 'G-KJV40E62XX',\r\n};\r\n\r\n// Сохраняем пользователя в DB.\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n\t// Если объект пользователя есть, тогда выполнится.\r\n\tif (!userAuth) return;\r\n\t// firestore возвращает два вида объектов: QueryReference or QuerySnapshot. Они могут быть либо документом, либо коллекцией в зависимости от того какой именно запрашиваем. Ответ получим, даже, если данных в DB нет.\r\n\r\n\t// Query - запрос на получение документа/коллекции из DB:\r\n\t// firestore.doc('/users/:userId');\r\n\t// firestore.collection('/users');\r\n\r\n\t// QueryReference (firestore.doc('users/dsfasfsafas') - отправили запрос на получение данных - получим в ответ объект QueryReference. Этот объект не содержит данных, касающихся документа/коллекции, которую запрашиваем. Он содержит данные запроса (path и id, который передали) и метод для получения объекта Snapshot, который содержит данные, которые ищем.\r\n\r\n\t// documentReference (запрос к документу) - к документу можно применить CRUD методы (create - .set(), retrieve - .get(), update - .update(), delete - .delete() ).\r\n\r\n\t// .get() - получить данные из documentReference - применяем на объекте, который возвращает documentReference - возвращает documentSnapshot (объект с данными, касающимися нашего запроса). Этот метод можно применить и на коллекции (Проверить, что получим).\r\n\r\n\t// collectionReference (запрос к коллекции) - к коллекции можно применить .add() метод, позволяющий добавить документ в коллекцию.\r\n\r\n\t// Обратились к документу. Получили объект documentRef. Еще не знаем, есть ли такой документ в DB или нет.\r\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\t// Обратились к Snapshot. Узнали существует ли такой документ в DB или нет. В этом объекте есть свойство exists. Если его значение true, значит документ есть в DB, если false, значит такого документа в DB нет. Там же есть id из объекта user, который получаем, отслеживая аутентификацию (auth.onAuthStateChanged()). Теперь можно запросить данные из этого документа, используя метод .data().\r\n\tconst snapShot = await userRef.get();\r\n\tconsole.log('snapShot:', snapShot);\r\n\r\n\t// Если данных в DB нет. Т.е. пользователь заходит через гугл или регистрируется впервые, тогда нужно добавить этого пользователя в DB.\r\n\tif (!snapShot.exists) {\r\n\t\tconst { displayName, email } = userAuth; // объект, который получаем при попытке залогиниться.\r\n\t\tconst createdAt = new Date();\r\n\r\n\t\ttry {\r\n\t\t\tawait userRef.set({\r\n\t\t\t\tdisplayName,\r\n\t\t\t\temail,\r\n\t\t\t\tcreatedAt,\r\n\t\t\t\t...additionalData,\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('error creating user', error.message);\r\n\t\t}\r\n\t}\r\n\r\n\t// const snapshotData = await snapShot.data();\r\n\t// console.log('snapshotData:', snapshotData);\r\n\r\n\treturn userRef;\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}