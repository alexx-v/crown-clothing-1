{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-Projects\\\\Andrei-Neagoie\\\\crown-clothing-2\\\\crown-clothing\\\\src\\\\App.js\";\n// import React from 'react';\n// import { Route, Switch, Redirect } from 'react-router-dom';\n// import { connect } from 'react-redux';\n// import { createStructuredSelector } from 'reselect';\n// import './App.css';\n// import HomePage from './pages/homepage/homepage';\n// import ShopPage from './pages/shop/shop';\n// import SignInAndSignUpPage from './pages/sign-in-and-sign-out/sign-in-and-sign-out';\n// import Header from './components/header/header';\n// import { selectCurrentUser } from './redux/user/user.selector';\n// import CheckoutPage from './pages/checkout/checkout';\n// import { auth, createUserProfileDocument } from './firebase/firebase.utils';\n// import { setCurrentUser } from './redux/user/user.actions';\n// class App extends React.Component {\n// \tunsubscribeFromAuth = null;\n// \tcomponentDidMount() {\n// \t\tconst { setCurrentUser } = this.props;\n// \t\tthis.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n// \t\t\tif (userAuth) {\n// \t\t\t\tconst userRef = await createUserProfileDocument(userAuth);\n// \t\t\t\tuserRef.onSnapshot((snapShot) => {\n// \t\t\t\t\tsetCurrentUser({\n// \t\t\t\t\t\tid: snapShot.id,\n// \t\t\t\t\t\t...snapShot.data(),\n// \t\t\t\t\t});\n// \t\t\t\t});\n// \t\t\t} else {\n// \t\t\t\tsetCurrentUser(userAuth); // userAuth = null\n// \t\t\t}\n// \t\t});\n// \t}\n// \tcomponentWillUnmount() {\n// \t\tthis.unsubscribeFromAuth();\n// \t}\n// \trender() {\n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t<Header />\n// \t\t\t\t<Switch>\n// \t\t\t\t\t<Route exact path='/' component={HomePage} />\n// \t\t\t\t\t<Route path='/shop' component={ShopPage} />\n// \t\t\t\t\t<Route exact path='/checkout' component={CheckoutPage} />\n// \t\t\t\t\t<Route\n// \t\t\t\t\t\texact\n// \t\t\t\t\t\tpath='/signin'\n// \t\t\t\t\t\trender={() =>\n// \t\t\t\t\t\t\tthis.props.currentUser ? (\n// \t\t\t\t\t\t\t\t<Redirect to='/' />\n// \t\t\t\t\t\t\t) : (\n// \t\t\t\t\t\t\t\t<SignInAndSignUpPage />\n// \t\t\t\t\t\t\t)\n// \t\t\t\t\t\t}\n// \t\t\t\t\t/>\n// \t\t\t\t</Switch>\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n// const mapStateToProps = createStructuredSelector({\n// \tcurrentUser: selectCurrentUser,\n// });\n// const mapDispatchToProps = (dispatch) => ({\n// \tsetCurrentUser: (user) => dispatch(setCurrentUser(user)),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport HomePage from './pages/homepage/homepage';\nimport ShopPage from './pages/shop/shop';\nimport Header from './components/header/header';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-out/sign-in-and-sign-out';\nimport CheckoutPage from './pages/checkout/checkout';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils'; // Для записи в state импортируем соответствующий action.\n\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props; // Подписка на аутентификацию. Запускается вместе с приложением и следит за тем вышел/зашел ли юзер. Эта подписка (onAuthStateChanged) возвращает объект userAuth (с инфо юзера, который зашел) в котором хранится инфо - имя юзера и email и id. Когда юзер вышел userAuth = null. Следовательно срабатывает else и state будет перезаписан с currentUser = null.\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      console.log('userAuth before if:', userAuth);\n\n      if (userAuth) {\n        // Если пользователя нет (snapshot.exists: false) в db, тогда добавит. В любом случае вернет userRef, ответ на запрос к серверу по id юзера, который зашел.\n        const userRef = await createUserProfileDocument(userAuth); // Получаем данные (snapShot) из userRef. При этом обновляем текущий state этими данными, беря id и другую инфо (.data()). Это происходит независимо от того добавился ли пользователь впервые или уже заходил раньше, т.к. работает с тем, что возвращает функция, а это userRef или undefined, если userAuth = null.\n        // Как я понял, onSnapshot возвращает такой же объект snapShot, как мы получаем в createUserProfileDocument. При этом, если пользователь зашел, с помощью этого объекта, с помощью snapShot.data() можно получить данные из db. data() нужен, т.к. snapShot не имеет данных юзера из db.\n\n        userRef.onSnapshot(snapShot => {\n          // console.log('onSnapshot:', snapShot);\n          // console.log('snapShot.data():', snapShot.data());\n          // snapShot.data() не содержит id пользователя, а только данные, которые были добавлены в db. id берем из snapShot.\n          // Этот объект будет передан как user в свойство payload: user. Затем сработает userReducer, где проверится тип action и дальше, userReducer создаст новый state, куда скопируется предыдущий state + заново созданное свойство currentUser: action.payload. Здесь в currentUser пойдет объект с данными пользователя.\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data() // здесь свойства, которые мы добавили конкретному юзеру в db.\n\n          });\n        });\n      } else {\n        console.log('userAuth else:', userAuth); // Когда юзер выходит, onAuthStateChanged возвращает userAuth = null, срабатывает else и в этот момент перезаписываем state, где теперь currentUser: null.\n        // this.setState({ currentUser: userAuth });\n        // Здесь в currentUser пойдет null.\n\n        setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    // Когда компонент удален, подписка обрывается.\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }\n      }) : /*#__PURE__*/React.createElement(SignInAndSignUpPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 6\n      }\n    })));\n  }\n\n} // Сюда в скобки приходит объект, содержащий весь state. Этот объект деструктурируем и получаем user: Object { currentUser: null }. Далее в пропсы App передаем объект со значением юзера - либо объект, либо null.\n// const mapStateToProps = ({ user }) => ({\n// \tcurrentUser: user.currentUser,\n// });\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // dispatch принимает action object, который будет передан в каждый reducer. Затем reducer проверяет type и если type подходит, изменяет state (создаст новый state, где все будет как было, просто перезапишет свойство currentUser: newValue).\n// mapDispatchToProps - передает setCurrentUser в props компонента App, после чего деструктурируем его из props и используем внутри App. Где этот action будет вызываться либо с объектом user, либо с null, когда пользователь вышел.\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n}); // https://react-redux.js.org/api/connect\n// mapStateToProps здесь null (нам не нужно передавать state сюда, мы только записываем currentUser в state). Так же в connect могуть быть другие аргументы: mergeProps (Function), options (Object)\n// connect передает dispatch как props в компонент, если не передаем второй параметр.\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["E:/React-Projects/Andrei-Neagoie/crown-clothing-2/crown-clothing/src/App.js"],"names":["React","Switch","Route","Redirect","connect","createStructuredSelector","HomePage","ShopPage","Header","SignInAndSignUpPage","CheckoutPage","auth","createUserProfileDocument","setCurrentUser","selectCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","console","log","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import { Route, Switch, Redirect } from 'react-router-dom';\n// import { connect } from 'react-redux';\n// import { createStructuredSelector } from 'reselect';\n\n// import './App.css';\n\n// import HomePage from './pages/homepage/homepage';\n// import ShopPage from './pages/shop/shop';\n// import SignInAndSignUpPage from './pages/sign-in-and-sign-out/sign-in-and-sign-out';\n// import Header from './components/header/header';\n// import { selectCurrentUser } from './redux/user/user.selector';\n// import CheckoutPage from './pages/checkout/checkout';\n\n// import { auth, createUserProfileDocument } from './firebase/firebase.utils';\n\n// import { setCurrentUser } from './redux/user/user.actions';\n\n// class App extends React.Component {\n// \tunsubscribeFromAuth = null;\n\n// \tcomponentDidMount() {\n// \t\tconst { setCurrentUser } = this.props;\n\n// \t\tthis.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n// \t\t\tif (userAuth) {\n// \t\t\t\tconst userRef = await createUserProfileDocument(userAuth);\n// \t\t\t\tuserRef.onSnapshot((snapShot) => {\n// \t\t\t\t\tsetCurrentUser({\n// \t\t\t\t\t\tid: snapShot.id,\n// \t\t\t\t\t\t...snapShot.data(),\n// \t\t\t\t\t});\n// \t\t\t\t});\n// \t\t\t} else {\n// \t\t\t\tsetCurrentUser(userAuth); // userAuth = null\n// \t\t\t}\n// \t\t});\n// \t}\n\n// \tcomponentWillUnmount() {\n// \t\tthis.unsubscribeFromAuth();\n// \t}\n\n// \trender() {\n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t<Header />\n// \t\t\t\t<Switch>\n// \t\t\t\t\t<Route exact path='/' component={HomePage} />\n// \t\t\t\t\t<Route path='/shop' component={ShopPage} />\n// \t\t\t\t\t<Route exact path='/checkout' component={CheckoutPage} />\n// \t\t\t\t\t<Route\n// \t\t\t\t\t\texact\n// \t\t\t\t\t\tpath='/signin'\n// \t\t\t\t\t\trender={() =>\n// \t\t\t\t\t\t\tthis.props.currentUser ? (\n// \t\t\t\t\t\t\t\t<Redirect to='/' />\n// \t\t\t\t\t\t\t) : (\n// \t\t\t\t\t\t\t\t<SignInAndSignUpPage />\n// \t\t\t\t\t\t\t)\n// \t\t\t\t\t\t}\n// \t\t\t\t\t/>\n// \t\t\t\t</Switch>\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\n// const mapStateToProps = createStructuredSelector({\n// \tcurrentUser: selectCurrentUser,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n// \tsetCurrentUser: (user) => dispatch(setCurrentUser(user)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport HomePage from './pages/homepage/homepage';\nimport ShopPage from './pages/shop/shop';\nimport Header from './components/header/header';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-out/sign-in-and-sign-out';\nimport CheckoutPage from './pages/checkout/checkout';\n\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\n// Для записи в state импортируем соответствующий action.\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selectors';\n\nimport './App.css';\n\nclass App extends React.Component {\n\tunsubscribeFromAuth = null;\n\n\tcomponentDidMount() {\n\t\tconst { setCurrentUser } = this.props;\n\t\t// Подписка на аутентификацию. Запускается вместе с приложением и следит за тем вышел/зашел ли юзер. Эта подписка (onAuthStateChanged) возвращает объект userAuth (с инфо юзера, который зашел) в котором хранится инфо - имя юзера и email и id. Когда юзер вышел userAuth = null. Следовательно срабатывает else и state будет перезаписан с currentUser = null.\n\t\tthis.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n\t\t\tconsole.log('userAuth before if:', userAuth);\n\t\t\tif (userAuth) {\n\t\t\t\t// Если пользователя нет (snapshot.exists: false) в db, тогда добавит. В любом случае вернет userRef, ответ на запрос к серверу по id юзера, который зашел.\n\t\t\t\tconst userRef = await createUserProfileDocument(userAuth);\n\t\t\t\t// Получаем данные (snapShot) из userRef. При этом обновляем текущий state этими данными, беря id и другую инфо (.data()). Это происходит независимо от того добавился ли пользователь впервые или уже заходил раньше, т.к. работает с тем, что возвращает функция, а это userRef или undefined, если userAuth = null.\n\t\t\t\t// Как я понял, onSnapshot возвращает такой же объект snapShot, как мы получаем в createUserProfileDocument. При этом, если пользователь зашел, с помощью этого объекта, с помощью snapShot.data() можно получить данные из db. data() нужен, т.к. snapShot не имеет данных юзера из db.\n\t\t\t\tuserRef.onSnapshot((snapShot) => {\n\t\t\t\t\t// console.log('onSnapshot:', snapShot);\n\t\t\t\t\t// console.log('snapShot.data():', snapShot.data());\n\t\t\t\t\t// snapShot.data() не содержит id пользователя, а только данные, которые были добавлены в db. id берем из snapShot.\n\n\t\t\t\t\t// Этот объект будет передан как user в свойство payload: user. Затем сработает userReducer, где проверится тип action и дальше, userReducer создаст новый state, куда скопируется предыдущий state + заново созданное свойство currentUser: action.payload. Здесь в currentUser пойдет объект с данными пользователя.\n\t\t\t\t\tsetCurrentUser({\n\t\t\t\t\t\tid: snapShot.id,\n\t\t\t\t\t\t...snapShot.data(), // здесь свойства, которые мы добавили конкретному юзеру в db.\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log('userAuth else:', userAuth);\n\t\t\t\t// Когда юзер выходит, onAuthStateChanged возвращает userAuth = null, срабатывает else и в этот момент перезаписываем state, где теперь currentUser: null.\n\t\t\t\t// this.setState({ currentUser: userAuth });\n\t\t\t\t// Здесь в currentUser пойдет null.\n\t\t\t\tsetCurrentUser(userAuth);\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// Когда компонент удален, подписка обрывается.\n\t\tthis.unsubscribeFromAuth();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* Здесь Header всегда будет показан независимо от того, что ниже. Т.е. переходы по страницам на него влиять никак не будут. */}\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={HomePage} />\n\t\t\t\t\t<Route path='/shop' component={ShopPage} />\n\t\t\t\t\t<Route exact path='/checkout' component={CheckoutPage} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath='/signin'\n\t\t\t\t\t\trender={() =>\n\t\t\t\t\t\t\tthis.props.currentUser ? (\n\t\t\t\t\t\t\t\t<Redirect to='/' />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<SignInAndSignUpPage />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// Сюда в скобки приходит объект, содержащий весь state. Этот объект деструктурируем и получаем user: Object { currentUser: null }. Далее в пропсы App передаем объект со значением юзера - либо объект, либо null.\n// const mapStateToProps = ({ user }) => ({\n// \tcurrentUser: user.currentUser,\n// });\n\nconst mapStateToProps = createStructuredSelector({\n\tcurrentUser: selectCurrentUser,\n});\n\n// dispatch принимает action object, который будет передан в каждый reducer. Затем reducer проверяет type и если type подходит, изменяет state (создаст новый state, где все будет как было, просто перезапишет свойство currentUser: newValue).\n\n// mapDispatchToProps - передает setCurrentUser в props компонента App, после чего деструктурируем его из props и используем внутри App. Где этот action будет вызываться либо с объектом user, либо с null, когда пользователь вышел.\nconst mapDispatchToProps = (dispatch) => ({\n\tsetCurrentUser: (user) => dispatch(setCurrentUser(user)),\n});\n\n// https://react-redux.js.org/api/connect\n// mapStateToProps здесь null (нам не нужно передавать state сюда, мы только записываем currentUser в state). Так же в connect могуть быть другие аргументы: mergeProps (Function), options (Object)\n\n// connect передает dispatch как props в компонент, если не передаем второй параметр.\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}