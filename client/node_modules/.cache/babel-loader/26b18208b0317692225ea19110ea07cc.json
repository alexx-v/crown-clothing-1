{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errormessage => ({\n  type: ShopActionTypes.fetchCollectionsFailure,\n  payload: errormessage\n}); // export const fetchCollectionsStartAsync = () => {\n// \treturn (dispatch) => {\n// \t\tconst collectionRef = firestore.collection('collections');\n// \t\t// Изменяет значение isFetching на true. Запускается спиннер.\n// \t\tdispatch(fetchCollectionsStart());\n// \t\tcollectionRef\n// \t\t\t.get()\n// \t\t\t.then((snapshot) => {\n// \t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n// \t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n// \t\t\t})\n// \t\t\t.catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n// \t};\n// };\n\nexport const fetchCollectionsStartAsync = () => {\n  // Внутри этой функции, размещается асинхронный код из shop componentDidMout().\n  return dispatch => {\n    // Обращаемся к DB к конкретным данным.\n    const collectionRef = firestore.collection('collections');\n    console.log('dispatch:', dispatch); // Как только эта функция была запущена. Запустится эта action, которая переключает состояние в shop.reducer на - isFetching: true.\n    // The store allows state to be updated via dispatch(action);.\n    // Метод dispatch - метод из thunk. Он запускается с action и обновляет state.\n\n    dispatch(fetchCollectionsStart()); // Ассинхронный запрос к серверу.\n    // Когда код запускается впервые или когда collectionRef обновляется - будем получать snapshot представляющий collections.\n\n    collectionRef.get().then(snapshot => {\n      console.log('snapshot:', snapshot);\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // массив объектов элементов коллекции.\n      // Трансформированный массив в объект.\n\n      console.log('collectionsMap:', collectionsMap); // Переключает isFetching: false и добавляет, полученные данные в collections: action.payload.\n\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["E:/React-Projects/Andrei-Neagoie/crown-clothing-2/crown-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errormessage","fetchCollectionsStartAsync","dispatch","collectionRef","collection","console","log","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SACCC,SADD,EAECC,+BAFD,QAGO,+BAHP;AAKA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC3CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADqB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,cAAD,KAAqB;AAC3DH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADqC;AAE3DC,EAAAA,OAAO,EAAEF;AAFkD,CAArB,CAAhC;AAKP,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AACzDP,EAAAA,IAAI,EAAEJ,eAAe,CAACU,uBADmC;AAEzDD,EAAAA,OAAO,EAAEE;AAFgD,CAAnB,CAAhC,C,CAKP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC/C;AACA,SAAQC,QAAD,IAAc;AACpB;AACA,UAAMC,aAAa,GAAGb,SAAS,CAACc,UAAV,CAAqB,aAArB,CAAtB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,QAAzB,EAJoB,CAKpB;AACA;AACA;;AACAA,IAAAA,QAAQ,CAACV,qBAAqB,EAAtB,CAAR,CARoB,CAUpB;AACA;;AACAW,IAAAA,aAAa,CACXI,GADF,GAEEC,IAFF,CAEQC,QAAD,IAAc;AACnBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,QAAzB;AAEA,YAAMb,cAAc,GAAGL,+BAA+B,CAACkB,QAAD,CAAtD,CAHmB,CAG+C;AAClE;;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BV,cAA/B,EALmB,CAOnB;;AACAM,MAAAA,QAAQ,CAACP,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACA,KAXF,EAYEc,KAZF,CAYSC,KAAD,IAAWT,QAAQ,CAACH,uBAAuB,CAACY,KAAK,CAACC,OAAP,CAAxB,CAZ3B;AAaA,GAzBD;AA0BA,CA5BM","sourcesContent":["import ShopActionTypes from './shop.types';\r\n\r\nimport {\r\n\tfirestore,\r\n\tconvertCollectionsSnapshotToMap,\r\n} from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n\tpayload: collectionsMap,\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errormessage) => ({\r\n\ttype: ShopActionTypes.fetchCollectionsFailure,\r\n\tpayload: errormessage,\r\n});\r\n\r\n// export const fetchCollectionsStartAsync = () => {\r\n// \treturn (dispatch) => {\r\n// \t\tconst collectionRef = firestore.collection('collections');\r\n// \t\t// Изменяет значение isFetching на true. Запускается спиннер.\r\n// \t\tdispatch(fetchCollectionsStart());\r\n\r\n// \t\tcollectionRef\r\n// \t\t\t.get()\r\n// \t\t\t.then((snapshot) => {\r\n// \t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n// \t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\r\n// \t\t\t})\r\n// \t\t\t.catch((error) => dispatch(fetchCollectionsFailure(error.message)));\r\n// \t};\r\n// };\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n\t// Внутри этой функции, размещается асинхронный код из shop componentDidMout().\r\n\treturn (dispatch) => {\r\n\t\t// Обращаемся к DB к конкретным данным.\r\n\t\tconst collectionRef = firestore.collection('collections');\r\n\r\n\t\tconsole.log('dispatch:', dispatch);\r\n\t\t// Как только эта функция была запущена. Запустится эта action, которая переключает состояние в shop.reducer на - isFetching: true.\r\n\t\t// The store allows state to be updated via dispatch(action);.\r\n\t\t// Метод dispatch - метод из thunk. Он запускается с action и обновляет state.\r\n\t\tdispatch(fetchCollectionsStart());\r\n\r\n\t\t// Ассинхронный запрос к серверу.\r\n\t\t// Когда код запускается впервые или когда collectionRef обновляется - будем получать snapshot представляющий collections.\r\n\t\tcollectionRef\r\n\t\t\t.get()\r\n\t\t\t.then((snapshot) => {\r\n\t\t\t\tconsole.log('snapshot:', snapshot);\r\n\r\n\t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot); // массив объектов элементов коллекции.\r\n\t\t\t\t// Трансформированный массив в объект.\r\n\t\t\t\tconsole.log('collectionsMap:', collectionsMap);\r\n\r\n\t\t\t\t// Переключает isFetching: false и добавляет, полученные данные в collections: action.payload.\r\n\t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\r\n\t\t\t})\r\n\t\t\t.catch((error) => dispatch(fetchCollectionsFailure(error.message)));\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}